// "Piece_of_wood.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Piece_of_wood.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Piece_of_wood_version_
const char Piece_of_wood_version[4] = { '0','1','9','d' };
#define _Piece_of_wood_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Piece_of_wood_vertexcount_
const unsigned Piece_of_wood_vertexcount = 57;
#define _Piece_of_wood_vertexcount_
#endif
#ifndef _Piece_of_wood_indexcount_
const unsigned Piece_of_wood_indexcount = 96;
#define _Piece_of_wood_indexcount_
#endif
#ifndef _Piece_of_wood_materialcount_
const unsigned Piece_of_wood_materialcount = 1; // can be used for batched draws
#define _Piece_of_wood_materialcount_
#endif
#ifndef _Piece_of_wood_meshcount_
const unsigned Piece_of_wood_meshcount = 1;
#define _Piece_of_wood_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Piece_of_wood_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Piece_of_wood_vertices[57] =
{
	{	{ -19.856726f, 4.411640f, -17.480907f },	{ 0.375000f, 0.750000f, 0.000000f },	{ 0.351900f, -0.110300f, 0.929500f }	},
	{	{ -19.883450f, 4.544070f, -17.439362f },	{ 0.625000f, 0.750000f, 0.000000f },	{ 0.351900f, -0.110300f, 0.929500f }	},
	{	{ -20.218302f, 4.544070f, -17.328327f },	{ 0.625000f, 0.887942f, 0.000000f },	{ 0.351900f, -0.110300f, 0.929500f }	},
	{	{ -20.218302f, 4.411640f, -17.328327f },	{ 0.375000f, 0.887942f, 0.000000f },	{ 0.351900f, -0.110300f, 0.929500f }	},
	{	{ -21.004740f, 4.411640f, -20.201405f },	{ 0.375000f, 0.500000f, 0.000000f },	{ 0.921300f, -0.000000f, -0.388800f }	},
	{	{ -21.014648f, 4.544070f, -20.224888f },	{ 0.625000f, 0.500000f, 0.000000f },	{ 0.921300f, -0.000000f, -0.388800f }	},
	{	{ -20.435686f, 4.494958f, -18.852898f },	{ 0.625000f, 0.625000f, 0.000000f },	{ 0.921300f, -0.000000f, -0.388800f }	},
	{	{ -20.430733f, 4.411640f, -18.841156f },	{ 0.375000f, 0.625000f, 0.000000f },	{ 0.921300f, -0.000000f, -0.388800f }	},
	{	{ -21.660048f, 4.411640f, -19.924873f },	{ 0.375000f, 0.250000f, 0.000000f },	{ -0.109900f, 0.464800f, -0.878600f }	},
	{	{ -21.635479f, 4.578142f, -19.866650f },	{ 0.625000f, 0.250000f, 0.000000f },	{ -0.109900f, 0.464800f, -0.878600f }	},
	{	{ -21.280956f, 4.544070f, -19.902220f },	{ 0.625000f, 0.362058f, 0.000000f },	{ -0.109900f, 0.464800f, -0.878600f }	},
	{	{ -21.375229f, 4.411640f, -19.987268f },	{ 0.375000f, 0.362058f, 0.000000f },	{ -0.109900f, 0.464800f, -0.878600f }	},
	{	{ -20.512033f, 4.411640f, -17.204376f },	{ 0.375000f, 0.000000f, 0.000000f },	{ -0.885900f, 0.247300f, 0.392500f }	},
	{	{ -20.433065f, 4.544070f, -17.174171f },	{ 0.625000f, 0.000000f, 0.000000f },	{ -0.885900f, 0.247300f, 0.392500f }	},
	{	{ -21.073757f, 4.511994f, -18.535513f },	{ 0.625000f, 0.125000f, 0.000000f },	{ -0.885900f, 0.247300f, 0.392500f }	},
	{	{ -21.086040f, 4.411640f, -18.564625f },	{ 0.375000f, 0.125000f, 0.000000f },	{ -0.885900f, 0.247300f, 0.392500f }	},
	{	{ -21.086040f, 4.411640f, -18.564625f },	{ 0.250000f, 0.250000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -21.660048f, 4.411640f, -19.924873f },	{ 0.375000f, 0.250000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -21.375229f, 4.411640f, -19.987268f },	{ 0.375000f, 0.362058f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -20.796766f, 4.411640f, -18.657797f },	{ 0.250000f, 0.362058f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -21.073757f, 4.511994f, -18.535513f },	{ 0.750000f, 0.250000f, 0.000000f },	{ -0.088000f, 0.995500f, 0.035900f }	},
	{	{ -20.433065f, 4.544070f, -17.174171f },	{ 0.875000f, 0.250000f, 0.000000f },	{ -0.088000f, 0.995500f, 0.035900f }	},
	{	{ -20.218302f, 4.544070f, -17.328327f },	{ 0.875000f, 0.362058f, 0.000000f },	{ -0.088000f, 0.995500f, 0.035900f }	},
	{	{ -20.780542f, 4.567995f, -18.688530f },	{ 0.750000f, 0.362058f, 0.000000f },	{ -0.088000f, 0.995500f, 0.035900f }	},
	{	{ -20.780542f, 4.567995f, -18.688530f },	{ 0.750000f, 0.362058f, 0.000000f },	{ 0.088800f, 0.995000f, -0.044700f }	},
	{	{ -20.218302f, 4.544070f, -17.328327f },	{ 0.875000f, 0.362058f, 0.000000f },	{ 0.088800f, 0.995000f, -0.044700f }	},
	{	{ -19.883450f, 4.544070f, -17.439362f },	{ 0.875000f, 0.500000f, 0.000000f },	{ 0.088800f, 0.995000f, -0.044700f }	},
	{	{ -20.435686f, 4.494958f, -18.852898f },	{ 0.750000f, 0.500000f, 0.000000f },	{ 0.088800f, 0.995000f, -0.044700f }	},
	{	{ -21.004740f, 4.411640f, -20.201405f },	{ 0.375000f, 0.500000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -20.430733f, 4.411640f, -18.841156f },	{ 0.250000f, 0.500000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -21.375229f, 4.411640f, -19.987268f },	{ 0.375000f, 0.362058f, 0.000000f },	{ -0.601900f, 0.357700f, -0.714000f }	},
	{	{ -21.280956f, 4.544070f, -19.902220f },	{ 0.625000f, 0.362058f, 0.000000f },	{ -0.601900f, 0.357700f, -0.714000f }	},
	{	{ -21.014648f, 4.544070f, -20.224888f },	{ 0.625000f, 0.500000f, 0.000000f },	{ -0.601900f, 0.357700f, -0.714000f }	},
	{	{ -21.004740f, 4.411640f, -20.201405f },	{ 0.375000f, 0.500000f, 0.000000f },	{ -0.601900f, 0.357700f, -0.714000f }	},
	{	{ -20.218302f, 4.411640f, -17.328327f },	{ 0.375000f, 0.887942f, 0.000000f },	{ 0.466300f, -0.236200f, 0.852500f }	},
	{	{ -20.218302f, 4.544070f, -17.328327f },	{ 0.625000f, 0.887942f, 0.000000f },	{ 0.466300f, -0.236200f, 0.852500f }	},
	{	{ -20.433065f, 4.544070f, -17.174171f },	{ 0.625000f, 1.000000f, 0.000000f },	{ 0.466300f, -0.236200f, 0.852500f }	},
	{	{ -20.512033f, 4.411640f, -17.204376f },	{ 0.375000f, 1.000000f, 0.000000f },	{ 0.466300f, -0.236200f, 0.852500f }	},
	{	{ -20.218302f, 4.411640f, -17.328327f },	{ 0.125000f, 0.362058f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -19.856726f, 4.411640f, -17.480907f },	{ 0.125000f, 0.500000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -21.280956f, 4.544070f, -19.902220f },	{ 0.625000f, 0.362058f, 0.000000f },	{ 0.095000f, 0.995000f, -0.030000f }	},
	{	{ -20.780542f, 4.567995f, -18.688530f },	{ 0.750000f, 0.362058f, 0.000000f },	{ 0.095000f, 0.995000f, -0.030000f }	},
	{	{ -20.435686f, 4.494958f, -18.852898f },	{ 0.750000f, 0.500000f, 0.000000f },	{ 0.095000f, 0.995000f, -0.030000f }	},
	{	{ -21.014648f, 4.544070f, -20.224888f },	{ 0.625000f, 0.500000f, 0.000000f },	{ 0.095000f, 0.995000f, -0.030000f }	},
	{	{ -21.635479f, 4.578142f, -19.866650f },	{ 0.625000f, 0.250000f, 0.000000f },	{ -0.025900f, 0.999300f, 0.027400f }	},
	{	{ -21.073757f, 4.511994f, -18.535513f },	{ 0.750000f, 0.250000f, 0.000000f },	{ -0.025900f, 0.999300f, 0.027400f }	},
	{	{ -20.780542f, 4.567995f, -18.688530f },	{ 0.750000f, 0.362058f, 0.000000f },	{ -0.025900f, 0.999300f, 0.027400f }	},
	{	{ -21.280956f, 4.544070f, -19.902220f },	{ 0.625000f, 0.362058f, 0.000000f },	{ -0.025900f, 0.999300f, 0.027400f }	},
	{	{ -20.512033f, 4.411640f, -17.204376f },	{ 0.125000f, 0.250000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -21.086040f, 4.411640f, -18.564625f },	{ 0.375000f, 0.125000f, 0.000000f },	{ -0.921300f, -0.000000f, 0.388800f }	},
	{	{ -21.073757f, 4.511994f, -18.535513f },	{ 0.625000f, 0.125000f, 0.000000f },	{ -0.921300f, -0.000000f, 0.388800f }	},
	{	{ -21.635479f, 4.578142f, -19.866650f },	{ 0.625000f, 0.250000f, 0.000000f },	{ -0.921300f, -0.000000f, 0.388800f }	},
	{	{ -21.660048f, 4.411640f, -19.924873f },	{ 0.375000f, 0.250000f, 0.000000f },	{ -0.921300f, -0.000000f, 0.388800f }	},
	{	{ -20.430733f, 4.411640f, -18.841156f },	{ 0.375000f, 0.625000f, 0.000000f },	{ 0.909400f, 0.185000f, -0.372500f }	},
	{	{ -20.435686f, 4.494958f, -18.852898f },	{ 0.625000f, 0.625000f, 0.000000f },	{ 0.909400f, 0.185000f, -0.372500f }	},
	{	{ -19.883450f, 4.544070f, -17.439362f },	{ 0.625000f, 0.750000f, 0.000000f },	{ 0.909400f, 0.185000f, -0.372500f }	},
	{	{ -19.856726f, 4.411640f, -17.480907f },	{ 0.375000f, 0.750000f, 0.000000f },	{ 0.909400f, 0.185000f, -0.372500f }	},
};
#define _Piece_of_wood_vertices_
#endif
#ifndef _Piece_of_wood_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Piece_of_wood_indices[96] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 19, 18, 28,
	 29, 19, 28,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 36,
	 37, 34, 36,
	 38, 19, 29,
	 39, 38, 29,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 16, 19,
	 38, 48, 19,
	 49, 50, 51,
	 52, 49, 51,
	 53, 54, 55,
	 56, 53, 55,
};
#define _Piece_of_wood_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Piece_of_wood_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Piece_of_wood_materials[1] =
{
	{
		{{ 0.281004f, 0.096242f, 0.019049f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		250.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.450000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Material.001",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Piece_of_wood_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Piece_of_wood_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Piece_of_wood_batches[1][2] =
{
	{ 96, 0 },
};
#define _Piece_of_wood_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Piece_of_wood_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Piece_of_wood_meshes[1] =
{
	{
		"default",
		96,
		0,
		0,
	},
};
#define _Piece_of_wood_meshes_
#endif
